<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- sample01 -->
	<bean id="messageBeanImpl" class="sample01.MessageBeanImpl">
		<property name="str" value="Have a nice day!!"></property>
	</bean>
	<bean id="loggingAdvice" class="sample01.LoggingAdvice"/>
	<!-- AOP : Before -->
	<aop:config>
		<aop:pointcut expression="execution(public void sample01.MessageBeanImpl.*Before(..))" id="methodBefore"/>
		<!-- public void 들어가고 패키지.클래스.메소드 이러이러한 애들 대상으로 넣겠다. 클래스에*넣으면 전체 , *Before() 뒤에 Before들어가는 메소드전체-->
		
		<!-- 얘가 그 공통모듈이야. bean에 만들어놓고, 참조. -->
		<aop:aspect ref="loggingAdvice">
			<!-- pointcut 앞에 beforeTrace메소드 낑겨넣을거야. -->
			<aop:before method="beforeTrace" pointcut-ref="methodBefore"/>
		</aop:aspect>
	</aop:config>
	
	<!-- AOP : After -->
	<aop:config>
		<aop:pointcut expression="execution(public * *.*.*After(..))" id="methodAfter"/>
		<!-- public을 제외한 모든 조건은 * 사용가능. public *(void) *(패키지).*(클래스).*(메소드) -->
		<aop:pointcut expression="execution(public * *.*.*Print(..))" id="methodAround"/>
		<!-- config pointcut이렇게 한군데에 여러개 작성가능 -->
	<aop:aspect ref="loggingAdvice">
		<aop:after method="afterTrace" pointcut-ref="methodAfter"/>
		<aop:around method="trace" pointcut-ref="methodAround"/>
	</aop:aspect>
	</aop:config>
	
	<!-- AOP : around -->
</beans>
<!-- 
Target 클래스 안에 있는 모든 메소드가 joinPoint(타겟대상후보)
	public void showPrintBefore() {
	public void viewPrintBefore() {
	public void display() {


-->
